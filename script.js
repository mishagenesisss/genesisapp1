// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ localStorage –∏–ª–∏ IndexedDB)
let userData = {
    id: tg.initDataUnsafe.user?.id || Math.floor(Math.random() * 1000000),
    name: tg.initDataUnsafe.user?.first_name || '–ì–æ—Å—Ç—å',
    balance: 10.00, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    gamesPlayed: 0,
    wins: 0,
    losses: 0,
    referralCode: `REF${tg.initDataUnsafe.user?.id || Math.floor(Math.random() * 10000)}`,
    referrals: [],
    referralBalance: 0,
    transactions: [],
    gameHistory: []
};

// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä
const GAME_COEFFICIENTS = {
    dice: 5,
    even_odd: 1.8,
    high_low: 1.8,
    darts: { 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ': 1.8, '‚ö™ –ë–µ–ª–æ–µ': 2.5 },
    football: { '‚öΩ –ì–æ–ª': 1.5, '‚ùå –ú–∏–º–æ': 2.0 },
    basketball: { 'üèÄ –ì–æ–ª': 1.5, '‚ùå –ú–∏–º–æ': 2.0 },
    bowling: { 'üé≥ –°—Ç—Ä–∞–π–∫': 3.0, 'üéØ –°–ø—ç—Ä': 1.2 },
    roulette: { 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ': 1.8, '‚ö´ –ß—ë—Ä–Ω–æ–µ': 1.8, 'üü¢ –ó–µ–ª—ë–Ω–æ–µ (0)': 30 }
};

// –†—É–ª–µ—Ç–∫–∞
const ROULETTE_NUMBERS = [
    { number: 0, color: 'üü¢' },
    { number: 32, color: 'üî¥' }, { number: 15, color: '‚ö´' }, 
    { number: 19, color: 'üî¥' }, { number: 4, color: '‚ö´' },
    // ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ —Ä—É–ª–µ—Ç–∫–∏
];

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const elements = {
    mainMenu: document.getElementById('main-menu'),
    depositForm: document.getElementById('deposit-form'),
    withdrawForm: document.getElementById('withdraw-form'),
    diceGame: document.getElementById('dice-game-container'),
    profileContainer: document.getElementById('profile-container'),
    referralContainer: document.getElementById('referral-container'),
    helpContainer: document.getElementById('help-container'),
    resultContainer: document.getElementById('result-container'),
    backButtons: document.querySelectorAll('.back-btn'),
    userBalance: document.getElementById('user-balance'),
    refreshBalance: document.getElementById('refresh-balance'),
    depositAmount: document.getElementById('deposit-amount'),
    submitDeposit: document.getElementById('submit-deposit'),
    withdrawAmount: document.getElementById('withdraw-amount'),
    withdrawWallet: document.getElementById('withdraw-wallet'),
    submitWithdraw: document.getElementById('submit-withdraw'),
    diceBetAmount: document.getElementById('dice-bet-amount'),
    numberButtons: document.querySelectorAll('.number-btn'),
    profileId: document.getElementById('profile-id'),
    profileName: document.getElementById('profile-name'),
    profileBalance: document.getElementById('profile-balance'),
    profileGames: document.getElementById('profile-games'),
    profileWins: document.getElementById('profile-wins'),
    profileLosses: document.getElementById('profile-losses'),
    profileWinrate: document.getElementById('profile-winrate'),
    referralLink: document.getElementById('referral-link'),
    referralCount: document.getElementById('referral-count'),
    referralEarnings: document.getElementById('referral-earnings'),
    withdrawReferral: document.getElementById('withdraw-referral'),
    resultTitle: document.getElementById('result-title'),
    resultContent: document.getElementById('result-content'),
    playAgain: document.getElementById('play-again')
};

// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let currentGame = null;
let currentBet = 0;
let currentChoice = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadUserData();
    setupEventListeners();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    document.getElementById('deposit-btn').addEventListener('click', () => showSection('deposit-form'));
    document.getElementById('withdraw-btn').addEventListener('click', () => showSection('withdraw-form'));
    document.getElementById('dice-game').addEventListener('click', () => {
        currentGame = 'dice';
        showSection('dice-game-container');
    });
    document.getElementById('even-odd-game').addEventListener('click', () => {
        currentGame = 'even_odd';
        startGame('even_odd');
    });
    document.getElementById('high-low-game').addEventListener('click', () => {
        currentGame = 'high_low';
        startGame('high_low');
    });
    document.getElementById('darts-game').addEventListener('click', () => {
        currentGame = 'darts';
        startGame('darts');
    });
    document.getElementById('football-game').addEventListener('click', () => {
        currentGame = 'football';
        startGame('football');
    });
    document.getElementById('basketball-game').addEventListener('click', () => {
        currentGame = 'basketball';
        startGame('basketball');
    });
    document.getElementById('bowling-game').addEventListener('click', () => {
        currentGame = 'bowling';
        startGame('bowling');
    });
    document.getElementById('roulette-game').addEventListener('click', () => {
        currentGame = 'roulette';
        startGame('roulette');
    });
    document.getElementById('profile-btn').addEventListener('click', () => showSection('profile-container'));
    document.getElementById('referral-btn').addEventListener('click', () => showSection('referral-container'));
    document.getElementById('help-btn').addEventListener('click', () => showSection('help-container'));
    
    // –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    elements.backButtons.forEach(btn => {
        btn.addEventListener('click', () => showSection('main-menu'));
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    elements.refreshBalance.addEventListener('click', loadUserData);
    
    // –î–µ–ø–æ–∑–∏—Ç
    elements.submitDeposit.addEventListener('click', processDeposit);
    
    // –í—ã–≤–æ–¥
    elements.submitWithdraw.addEventListener('click', processWithdraw);
    
    // –ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫
    elements.numberButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            currentChoice = this.dataset.number;
            processDiceGame();
        });
    });
    
    // –í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    elements.withdrawReferral.addEventListener('click', withdrawReferralEarnings);
    
    // –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
    elements.playAgain.addEventListener('click', () => {
        if (currentGame) {
            showSection(currentGame + '-container');
        } else {
            showSection('main-menu');
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
function showSection(sectionId) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    Object.values(elements).forEach(el => {
        if (el.classList?.contains?.('app-container')) return;
        if (el.nodeType === 1) el.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
    if (sectionId === 'main-menu') {
        elements.mainMenu.style.display = 'block';
    } else {
        document.getElementById(sectionId).style.display = 'block';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    updateUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –ë–∞–ª–∞–Ω—Å
    elements.userBalance.textContent = `${userData.balance.toFixed(2)} USD`;
    
    // –ü—Ä–æ—Ñ–∏–ª—å
    elements.profileId.textContent = userData.id;
    elements.profileName.textContent = userData.name;
    elements.profileBalance.textContent = `${userData.balance.toFixed(2)} USD`;
    elements.profileGames.textContent = userData.gamesPlayed;
    elements.profileWins.textContent = userData.wins;
    elements.profileLosses.textContent = userData.losses;
    elements.profileWinrate.textContent = userData.gamesPlayed > 0 
        ? `${(userData.wins / userData.gamesPlayed * 100).toFixed(1)}%` 
        : '0%';
    
    // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    elements.referralLink.textContent = `https://t.me/${tg.initDataUnsafe.user?.username || 'bot'}_bot?start=${userData.referralCode}`;
    elements.referralCount.textContent = userData.referrals.length;
    elements.referralEarnings.textContent = `${userData.referralBalance.toFixed(2)} USD`;
    elements.withdrawReferral.style.display = userData.referralBalance >= 1 ? 'block' : 'none';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
function processDeposit() {
    const amount = parseFloat(elements.depositAmount.value);
    
    if (isNaN(amount) || amount < 0.1) {
        alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 0.1 USD');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    userData.balance += amount;
    userData.transactions.push({
        type: 'deposit',
        amount: amount,
        date: new Date().toISOString()
    });
    
    alert(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount.toFixed(2)} USD!`);
    elements.depositAmount.value = '';
    updateUI();
    showSection('main-menu');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
function processWithdraw() {
    const amount = parseFloat(elements.withdrawAmount.value);
    const wallet = elements.withdrawWallet.value.trim();
    
    if (isNaN(amount) || amount < 0.1) {
        alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 0.1 USD');
        return;
    }
    
    if (userData.balance < amount) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        return;
    }
    
    if (!wallet) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    userData.balance -= amount;
    userData.transactions.push({
        type: 'withdraw',
        amount: amount,
        wallet: wallet,
        date: new Date().toISOString(),
        status: 'completed'
    });
    
    alert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount.toFixed(2)} USD –Ω–∞ –∫–æ—à–µ–ª–µ–∫ ${wallet} –ø—Ä–∏–Ω—è—Ç!`);
    elements.withdrawAmount.value = '';
    elements.withdrawWallet.value = '';
    updateUI();
    showSection('main-menu');
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame(gameType) {
    const bet = prompt(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 0.1 USD):`);
    const amount = parseFloat(bet);
    
    if (isNaN(amount) || amount < 0.1) {
        alert('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏');
        return;
    }
    
    if (userData.balance < amount) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        return;
    }
    
    currentBet = amount;
    
    if (gameType === 'even_odd') {
        const choice = prompt('–í—ã–±–µ—Ä–∏—Ç–µ "–ß—ë—Ç" –∏–ª–∏ "–ù–µ—á—ë—Ç":').toLowerCase();
        if (choice !== '—á—ë—Ç' && choice !== '–Ω–µ—á—ë—Ç') {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–ß—ë—Ç" –∏–ª–∏ "–ù–µ—á—ë—Ç"');
            return;
        }
        currentChoice = choice;
        playGame();
    } 
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä...
    else if (gameType === 'roulette') {
        const choice = prompt('–í—ã–±–µ—Ä–∏—Ç–µ "üî¥ –ö—Ä–∞—Å–Ω–æ–µ", "‚ö´ –ß—ë—Ä–Ω–æ–µ" –∏–ª–∏ "üü¢ –ó–µ–ª—ë–Ω–æ–µ (0)":');
        if (choice !== 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' && choice !== '‚ö´ –ß—ë—Ä–Ω–æ–µ' && choice !== 'üü¢ –ó–µ–ª—ë–Ω–æ–µ (0)') {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "üî¥ –ö—Ä–∞—Å–Ω–æ–µ", "‚ö´ –ß—ë—Ä–Ω–æ–µ" –∏–ª–∏ "üü¢ –ó–µ–ª—ë–Ω–æ–µ (0)"');
            return;
        }
        currentChoice = choice;
        playGame();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫
function processDiceGame() {
    const amount = parseFloat(elements.diceBetAmount.value);
    
    if (isNaN(amount) || amount < 0.1) {
        alert('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏');
        return;
    }
    
    if (userData.balance < amount) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        return;
    }
    
    currentBet = amount;
    playGame();
}

// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
function playGame() {
    // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    userData.balance -= currentBet;
    userData.gamesPlayed++;
    
    let result, win, winAmount, coefficient;
    
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
    if (currentGame === 'dice') {
        const resultNum = Math.floor(Math.random() * 6) + 1;
        win = parseInt(currentChoice) === resultNum;
        coefficient = win ? GAME_COEFFICIENTS.dice : 0;
        winAmount = win ? currentBet * coefficient : 0;
        result = `–í—ã–ø–∞–ª–æ: ${resultNum}`;
    }
    else if (currentGame === 'even_odd') {
        const resultNum = Math.floor(Math.random() * 6) + 1;
        const resultType = resultNum % 2 === 0 ? '—á—ë—Ç' : '–Ω–µ—á—ë—Ç';
        win = currentChoice === resultType;
        coefficient = win ? GAME_COEFFICIENTS.even_odd : 0;
        winAmount = win ? currentBet * coefficient : 0;
        result = `–í—ã–ø–∞–ª–æ: ${resultNum} (${resultType})`;
    }
    else if (currentGame === 'roulette') {
        const { number, color } = ROULETTE_NUMBERS[Math.floor(Math.random() * ROULETTE_NUMBERS.length)];
        win = currentChoice.includes(color);
        coefficient = win ? GAME_COEFFICIENTS.roulette[currentChoice] : 0;
        winAmount = win ? currentBet * coefficient : 0;
        result = `–í—ã–ø–∞–ª–æ: ${number} ${color}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (win) {
        userData.balance += winAmount;
        userData.wins++;
    } else {
        userData.losses++;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
    userData.gameHistory.push({
        game: currentGame,
        bet: currentBet,
        choice: currentChoice,
        result: result,
        win: win,
        winAmount: winAmount,
        date: new Date().toISOString()
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    showGameResult({
        game: currentGame,
        bet: currentBet,
        choice: currentChoice,
        result: result,
        win: win,
        winAmount: winAmount,
        coefficient: coefficient
    });
    
    updateUI();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
function showGameResult(result) {
    showSection('result-container');
    elements.resultTitle.textContent = result.win ? 'üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!' : '‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏';
    
    let resultHtml = `
        <p>–ò–≥—Ä–∞: ${result.game}</p>
        <p>–°—Ç–∞–≤–∫–∞: ${result.bet.toFixed(2)} USD</p>
        <p>–í–∞—à –≤—ã–±–æ—Ä: ${result.choice}</p>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.result}</p>
    `;
    
    if (result.win) {
        resultHtml += `
            <p class="win-result">–í—ã–∏–≥—Ä—ã—à: ${result.winAmount.toFixed(2)} USD</p>
            <p>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: √ó${result.coefficient}</p>
        `;
    } else {
        resultHtml += `<p class="lose-result">–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${result.bet.toFixed(2)} USD</p>`;
    }
    
    elements.resultContent.innerHTML = resultHtml;
}

// –í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
function withdrawReferralEarnings() {
    if (userData.referralBalance < 1) {
        alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 1 USD');
        return;
    }
    
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${userData.referralBalance.toFixed(2)} USD —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å?`)) {
        userData.balance += userData.referralBalance;
        userData.referralBalance = 0;
        updateUI();
        alert('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å!');
    }
}